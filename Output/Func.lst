C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE FUNC
OBJECT MODULE PLACED IN .\Output\Func.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil\C51\BIN\C51.EXE Func\Func.C LARGE OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECT
                    -EXTEND PRINT(.\Output\Func.lst) OBJECT(.\Output\Func.obj)

line level    source

   1          #include "Core\Header\Include.h"
   2          
   3          //__________________________________________________________________________
   4          //
   5          //                         Audio func
   6          //__________________________________________________________________________
   7          
   8          #if(AUDIO_TYPE == _AUDIO_PWM)
   9          //==========================================================================
  10          //                          CMuteOn
  11          //==========================================================================
  12          void CMuteOn(void)
  13          {                                    
  14   1          // Set Mute
  15   1          if(_VOLUME_INV)         CSetPWM(bVOLUME_PWM,0xff);
  16   1          else                    CSetPWM(bVOLUME_PWM,0x00);
  17   1      
  18   1          bMUTE = _MUTE_ON;
  19   1      }
  20          
  21          //==========================================================================
  22          //                          CMuteOff
  23          //==========================================================================
  24          void CMuteOff(void)
  25          {
  26   1          bMUTE = _MUTE_OFF;
  27   1      }
  28          
  29          //==========================================================================
  30          //                               CSetVolume
  31          //==========================================================================
  32          void CSetVolume(void)
  33          {
  34   1          WORD iVolume;
  35   1                         
  36   1          if((GET_VOLUME() == 0) || (GET_AUDIO_MUTE()))
  37   1          {
  38   2             //  if(_VOLUME_INV)         CSetPWM(bVOLUME_PWM,0xff);
  39   2               //else                    CSetPWM(bVOLUME_PWM,0x00);
  40   2      
  41   2               CMuteOn();
  42   2               return;
  43   2          }
  44   1                         
  45   1          CMuteOff();
  46   1                                                                  
  47   1          iVolume = (WORD)(_MAX_VOLUME - _MIN_VOLUME) * GET_VOLUME() / 100;
  48   1      
  49   1          if(_VOLUME_INV)
  50   1              iVolume = _MAX_VOLUME - iVolume;
  51   1          else
  52   1              iVolume = _MIN_VOLUME + iVolume;
  53   1            
  54   1          CSetPWM(bVOLUME_PWM,iVolume);
C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 2   

  55   1      }
  56          #endif    // #if(AUDIO_TYPE == _AUDIO_PWM)
  57          
  58          #if(AUDIO_TYPE == _AUDIO_SC7313)
              //==========================================================================
              //                           MUTE_ON
              //==========================================================================
              void CMuteOn(void)
              {
                  CSetSc7313Volume(0);
                  CSc7313MuteOn();
              }
              
              //==========================================================================
              //                           CMuteOff
              //==========================================================================
              void CMuteOff(void)
              {
                  bMUTE = _MUTE_OFF;
              }
              
              //==========================================================================
              //                             CSetVolume
              //==========================================================================
              void CSetVolume(void)
              {      
              #if(_VIDEO_TV_SUPPORT)
               #if(_IF_PLL_DE_CHIP == _IF_PLL_DE_1338)
                   if (_SOURCE_VIDEO_TV == _GET_INPUT_SOURCE() && !gmi_CModeLocked() && bFM == 0)
                      return;
               #endif
              #endif
                   if((GET_AUDIO_MUTE()))// || (GET_VOLUME() == 0))
                   {
                       CMuteOn();
                       return;
                   }   
                  
                   CSetSc7313Volume(GET_VOLUME());
              #if (_SOUND_PROCESSOR)
                   CSetAudioProcessor(stAudioData.Balance, stAudioData.Bass, stAudioData.Treble);
              #else
                   CSetAudioProcessor(50, 50, 50);
              #endif      
                   if (bMUTE)
                       CMuteOff();
              }
              
              #endif          //#if(AUDIO_TYPE == _AUDIO_SC7313)
 104          
 105          //==========================================================================
 106          //                         CInitSoundChannel 
 107          //==========================================================================
 108          void CInitSoundChannel(BYTE ucChannel)
 109          {
 110   1           CMuteOn();
 111   1      
 112   1           switch(ucChannel)
 113   1           {
 114   2      #if(_VGA_SUPPORT)
 115   2               case _SOURCE_VGA:
 116   2                            
C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 3   

 117   2         #if(AUDIO_TYPE == _AUDIO_SC7313)
                           CSelect7313SoundChannel(0x01);
                 #elif(AUDIO_TYPE == _AUDIO_PWM)  
 120   2                   _AUDIO_A = 1;
 121   2                   _AUDIO_B = 0;                      
 122   2         #endif
 123   2                   break;
 124   2                           
 125   2               case _SOURCE_YPBPR:
 126   2               case _SOURCE_HDMI:
 127   2                       case _SOURCE_DVI: 
 128   2         #if(AUDIO_TYPE == _AUDIO_SC7313)
                           CSelect7313SoundChannel(0x03);
                 #elif(AUDIO_TYPE == _AUDIO_PWM) 
 131   2                   _AUDIO_A = 1;
 132   2                   _AUDIO_B = 1; 
 133   2         #endif
 134   2                   break;
 135   2      #endif
 136   2      
 137   2      #if(_VIDEO_SUPPORT)
 138   2               case _SOURCE_VIDEO_AV:
 139   2               case _SOURCE_VIDEO_SV:        
 140   2         #if(AUDIO_TYPE == _AUDIO_SC7313)
                           CSelect7313SoundChannel(0x02);
                 #elif(AUDIO_TYPE == _AUDIO_PWM) 
 143   2                   _AUDIO_A = 1;
 144   2                   _AUDIO_B = 0;                      
 145   2         #endif
 146   2                   break;
 147   2      #endif
 148   2        
 149   2               case _SOURCE_VIDEO_YUV:
 150   2         #if(AUDIO_TYPE == _AUDIO_SC7313)
                           CSelect7313SoundChannel(0x03);  // Only for PT2314
                 #elif(AUDIO_TYPE == _AUDIO_PWM)  
 153   2                   _AUDIO_A = 0;
 154   2                   _AUDIO_B = 1;                      
 155   2         #endif
 156   2              break;
 157   2      
 158   2      #if(_VIDEO_TV_SUPPORT)
                       case _SOURCE_VIDEO_TV:        
                 #if(AUDIO_TYPE == _AUDIO_SC7313)
                           CSelect7313SoundChannel(0x00);
                 #elif(AUDIO_TYPE == _AUDIO_PWM)  
                           _AUDIO_A = 0;
                           _AUDIO_B = 1;                      
                 #endif
                           break;
              #endif
 168   2      
 169   2           }
 170   1      }
 171          
 172          
 173          //==========================================================================
 174          //                          CGetCurrSourcePos
 175          //==========================================================================
 176          BYTE CGetCurrSourcePos(void)
 177          {
 178   1          if     (_GET_INPUT_SOURCE() == _SOURCE_0_TYPE)   return 0;
C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 4   

 179   1          else if(_GET_INPUT_SOURCE() == _SOURCE_1_TYPE)   return 1;
 180   1          else if(_GET_INPUT_SOURCE() == _SOURCE_2_TYPE)   return 2;
 181   1          else if(_GET_INPUT_SOURCE() == _SOURCE_3_TYPE)   return 3;
 182   1          else if(_GET_INPUT_SOURCE() == _SOURCE_4_TYPE)   return 4;
 183   1          else if(_GET_INPUT_SOURCE() == _SOURCE_5_TYPE)   return 5;
 184   1          else if(_GET_INPUT_SOURCE() == _SOURCE_6_TYPE)   return 6;
 185   1          else if(_GET_INPUT_SOURCE() == _SOURCE_7_TYPE)   return 7;
 186   1          else if(_GET_INPUT_SOURCE() == _SOURCE_8_TYPE)   return 8;
 187   1          else if(_GET_INPUT_SOURCE() == _SOURCE_9_TYPE)   return 9;
 188   1          else if(_GET_INPUT_SOURCE() == _SOURCE_10_TYPE)  return 10;
 189   1      
 190   1          return _NORMAL_SOURCE;
 191   1      }
 192          
 193          //==========================================================================
 194          //                          CSetCurrSource   
 195          //==========================================================================
 196          void CSetCurrSource(const BYTE ucCurrSource)
 197          {
 198   1          switch(ucCurrSource)
 199   1          {
 200   2          case 0:    _SET_INPUT_SOURCE(_SOURCE_0_TYPE);    break;
 201   2          case 1:    _SET_INPUT_SOURCE(_SOURCE_1_TYPE);    break;
 202   2          case 2:    _SET_INPUT_SOURCE(_SOURCE_2_TYPE);    break;
 203   2          case 3:    _SET_INPUT_SOURCE(_SOURCE_3_TYPE);    break;
 204   2          case 4:    _SET_INPUT_SOURCE(_SOURCE_4_TYPE);    break;
 205   2          case 5:    _SET_INPUT_SOURCE(_SOURCE_5_TYPE);    break;
 206   2          case 6:    _SET_INPUT_SOURCE(_SOURCE_6_TYPE);    break;
 207   2          case 7:    _SET_INPUT_SOURCE(_SOURCE_7_TYPE);    break;
 208   2          case 8:    _SET_INPUT_SOURCE(_SOURCE_8_TYPE);    break;
 209   2          case 9:    _SET_INPUT_SOURCE(_SOURCE_9_TYPE);    break;
 210   2          case 10:   _SET_INPUT_SOURCE(_SOURCE_10_TYPE);   break;
 211   2          }
 212   1      }
 213          
 214          //==========================================================================
 215          //                           bCurrSourceSupport
 216          //==========================================================================
 217          bit bCurrSourceSupport(const BYTE ucSource)
 218          {
 219   1          BYTE ucSourceTemp;
 220   1      
 221   1          switch(ucSource)
 222   1          {
 223   2          case 0:   ucSourceTemp = _SOURCE_0_TYPE;     break;
 224   2          case 1:   ucSourceTemp = _SOURCE_1_TYPE;     break;
 225   2          case 2:   ucSourceTemp = _SOURCE_2_TYPE;     break;
 226   2          case 3:   ucSourceTemp = _SOURCE_3_TYPE;     break;
 227   2          case 4:   ucSourceTemp = _SOURCE_4_TYPE;     break;
 228   2          case 5:   ucSourceTemp = _SOURCE_5_TYPE;     break;
 229   2          case 6:   ucSourceTemp = _SOURCE_6_TYPE;     break;
 230   2          case 7:   ucSourceTemp = _SOURCE_7_TYPE;     break;
 231   2          case 8:   ucSourceTemp = _SOURCE_8_TYPE;     break;
 232   2          case 9:   ucSourceTemp = _SOURCE_9_TYPE;     break;
 233   2          case 10:  ucSourceTemp = _SOURCE_10_TYPE;    break;
 234   2          }
 235   1      
 236   1          switch(ucSourceTemp)
 237   1          {
 238   2      #if (_VGA_SUPPORT)
 239   2          case _SOURCE_VGA:          return 1;
 240   2      #endif
C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 5   

 241   2      
 242   2      #if (_TMDS_SUPPORT)
 243   2          case _SOURCE_DVI:          return 1;
 244   2      #endif
 245   2      
 246   2      #if (_VIDEO_AV_SUPPORT)
 247   2          case _SOURCE_VIDEO_AV:     return 1;
 248   2      #endif
 249   2      
 250   2      #if (_VIDEO_SV_SUPPORT)
 251   2          case _SOURCE_VIDEO_SV:     return 1;
 252   2      #endif
 253   2      
 254   2      #if (_VIDEO_YUV_SUPPORT)
                  case _SOURCE_VIDEO_YUV:    return 1;
              #endif
 257   2      
 258   2      #if (_VIDEO_TV_SUPPORT)
                  case _SOURCE_VIDEO_TV:     return 1;
              #endif
 261   2      
 262   2      #if (_VIDEO_SCART_SUPPORT)
                  case _SOURCE_VIDEO_SCART:  return 1;
              #endif
 265   2      
 266   2      #if (_HDMI_SUPPORT)
 267   2          case _SOURCE_HDMI:         return 1;
 268   2      #endif
 269   2      
 270   2      #if (_YPBPR_SUPPORT)
 271   2          case _SOURCE_YPBPR:        return 1;
 272   2      #endif
 273   2          }
 274   1      
 275   1          return 0;
 276   1      }
 277          
 278          //==========================================================================
 279          //                          bChangeSource
 280          //==========================================================================
 281          bit bChangeSource(void)
 282          {
 283   1          bit bSourceSelect = 0;
 284   1          BYTE i;
 285   1      
 286   1          for (i = (CGetCurrSourcePos() + 1); i < _INPUT_PORT_NUM; i++)
 287   1          {
 288   2               if (bCurrSourceSupport(i))
 289   2               {
 290   3                   bSourceSelect = 1;
 291   3                   break;
 292   3               }
 293   2          }
 294   1      
 295   1          if (0 == bSourceSelect)  // Source not change
 296   1          {
 297   2              for (i = 0; i < CGetCurrSourcePos(); i++)
 298   2              {
 299   3                  if (bCurrSourceSupport(i))
 300   3                  {
 301   4                      bSourceSelect = 1;
 302   4                      break;
C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 6   

 303   4                  }
 304   3               }
 305   2          }
 306   1      
 307   1      
 308   1          if (bSourceSelect && i != CGetCurrSourcePos())
 309   1          {
 310   2              CSetCurrSource(i);
 311   2              CInitInputSource();
 312   2              return 1;
 313   2          }
 314   1      
 315   1          return 0;
 316   1      }
 317          
 318          
 319          //==========================================================================
 320          //                          CInitInputSource
 321          //==========================================================================
 322          void CInitInputSource(void)
 323          {
 324   1      #if(_HDMI_SUPPORT == _ON)
 325   1       #if(_HDCP_SUPPORT == _ON && _HDMI_HOT_PLUG_OPTION)
                  bDVIDetect = 0;
                      if(_GET_INPUT_SOURCE()==_SOURCE_HDMI)
                  {
                      bHot_Plug = _HOT_PLUG_LOW;
                      CTimerDelayXms(100);   //20070714 gary for HDMI compatibility problem
                      bHot_Plug = _HOT_PLUG_HI;
                  }
                  else
                  {
                      bHot_Plug = _HOT_PLUG_HI;
                  }
               #endif
 338   1      #endif
 339   1      
 340   1          //TUNER_PWR_OFF();
 341   1          switch(_GET_INPUT_SOURCE()) 
 342   1          {
 343   2      #if(_VGA_SUPPORT)
 344   2          case _SOURCE_VGA:
 345   2              break;
 346   2      #endif
 347   2      
 348   2      #if(_VIDEO_AV_SUPPORT)
 349   2          case _SOURCE_VIDEO_AV:
 350   2              gmi_CSelectInputChannel(_AV_CHANNEL, 0);
 351   2              break;
 352   2      #endif
 353   2      
 354   2      #if(_VIDEO_SV_SUPPORT)
 355   2          case _SOURCE_VIDEO_SV:
 356   2              gmi_CSelectInputChannel(_SV_CHANNEL, 0);
 357   2              break;
 358   2      #endif
 359   2      
 360   2      #if(_VIDEO_TV_SUPPORT)
                  case _SOURCE_VIDEO_TV:
                      gmi_CSelectInputChannel(_TV_CHANNEL, 0);
                      if (ucCurrState != _SOURCE_CHANGE_STATE && ucOsdEventMsg != _CHANGE_SOURCE_MSG)
                          CInitTV();
C51 COMPILER V9.00   FUNC                                                                  08/25/2023 16:47:35 PAGE 7   

                      break;
              #endif
 367   2      
 368   2      #if(_VIDEO_YUV_SUPPORT)
                  case _SOURCE_VIDEO_YUV:
                      break;
              #endif
 372   2      
 373   2      #if(_VIDEO_SCART_SUPPORT)
                  case _SOURCE_VIDEO_SCART:
                      break;                  
              #endif 
 377   2      
 378   2      #if(_HDMI_SUPPORT == _ON)
 379   2          case _SOURCE_HDMI:
 380   2              break;
 381   2      #endif
 382   2      
 383   2      #if(_YPBPR_SUPPORT)
 384   2          case _SOURCE_YPBPR:
 385   2              break;
 386   2      #endif
 387   2          }  
 388   1          
 389   1          CInitSoundChannel(_GET_INPUT_SOURCE());
 390   1      
 391   1      #if(_VIDEO_TV_SUPPORT)
               #if(_SLEEP_FUNC)
                  _SET_POWER_DOWN_TIME(0);
                  ucAutoPowerDownTime = 0xff;
                  CEepromSaveTvData();
               #endif
              #endif
 398   1      
 399   1      #if(_DE_INTERLACE_SUPPORT == _ON && _DE_INTERLACE_TEST_OPTION==_ENABLE)
 400   1          if (bSourceVideo())
 401   1              bDIstatus = 1;
 402   1          else
 403   1              bDIstatus = 0; 
 404   1      #endif
 405   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    591    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
