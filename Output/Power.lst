C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE POWER
OBJECT MODULE PLACED IN .\Output\Power.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil\C51\BIN\C51.EXE Core\code\rtd2662\Power.c LARGE OPTIMIZE(9,SPEED) BROWS
                    -E DEBUG OBJECTEXTEND PRINT(.\Output\Power.lst) OBJECT(.\Output\Power.obj)

line level    source

   1          //-------------------------------------------------------------------------
   2          // ID Code      : Power.c No.0002
   3          // Update Note  :
   4          //
   5          //---------------------------------------------------------------------------
   6          
   7          #define __POWER__
   8          
   9          #include "Core\Header\Include.h"
  10          
  11          //---------------------------------------------------------------------------
  12          
  13          bit CPowerHandler(void)
  14          {
  15   1      #if(_VIDEO_TV_SUPPORT)
                  if(GET_POWERSWITCH() || ucAutoPowerDownTime == 0)
              #else
  18   1          if(GET_POWERSWITCH())
  19   1      #endif
  20   1          {
  21   2              CPowerControl();
  22   2              CLR_POWERSWITCH();
  23   2              return _TRUE;
  24   2          }
  25   1          return _FALSE;
  26   1      }
  27          //---------------------------------------------------------------------------
  28          
  29          //eric 20070531
  30          void CPowerLedGreen(void)
  31          {
  32   1              bLED2=_ON;
  33   1              bLED1 =_OFF;
  34   1      }
  35          //---------------------------------------------------------------------------
  36          
  37          void CPowerLedRed(void)
  38          {
  39   1              bLED2=_OFF;
  40   1              bLED1 =_ON;     
  41   1      }
  42          //---------------------------------------------------------------------------
  43          
  44          void CPowerLedOrange(void)
  45          {
  46   1              bLED2=_OFF;
  47   1              bLED1 =_OFF;
  48   1      }
  49          //---------------------------------------------------------------------------
  50          
  51          void CPowerLedOn(void)
  52          {
  53   1              CPowerLedGreen();
  54   1      }
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 2   

  55          //---------------------------------------------------------------------------
  56          
  57          void CPowerLedOff(void)
  58          {
  59   1              CPowerLedRed();
  60   1      }
  61          
  62          void CPowerLedSleep(void)
  63          {
  64   1              CPowerLedOrange();
  65   1      }
  66          
  67          //--------------------------------------------------
  68          // Description  : Execute power up/down process
  69          // Input Value  : None
  70          // Output Value : None
  71          //--------------------------------------------------
  72          void CPowerControl(void)
  73          {  
  74   1      #if(_VIDEO_TV_SUPPORT && _SLEEP_FUNC)
                      if(GET_POWERSTATUS() || ucAutoPowerDownTime == 0)// Power Down Process
              #else
  77   1              if(GET_POWERSTATUS())// Power Down Process
  78   1      #endif
  79   1              {       
  80   2                      CPowerDownCustomerControl();
  81   2      // Eric 0618
  82   2      #if(_HDMI_HOT_PLUG_OPTION)
                      bHot_Plug = _HOT_PLUG_LOW;
              #endif
  85   2                      CPowerLedOff();//eric 20070531
  86   2              }
  87   1              else
  88   1              {                        // Power Up Process            
  89   2                      CPowerLedOn();
  90   2                      SET_POWERSTATUS();
  91   2                      CScalerReset();//Alanli 20070801
  92   2                      CPowerUpCustomerControl();
  93   2              ucTVSyncFailCount = 250;
  94   2                      CModeResetMode();
  95   2                      CEepromSaveSystemData();        
  96   2      
  97   2      #if(_VIDEO_SUPPORT == _ON)
  98   2       #if(_VIDEO_TV_SUPPORT)
                      if (_GET_INPUT_SOURCE() == _SOURCE_VIDEO_TV)
                          CInitTV();
               #endif
 102   2              CVideoInitial();
 103   2              CTimerDelayXms(10);     
 104   2              CVideoOutputDisable();
 105   2      #endif  // End of #if(_VIDEO_SUPPORT == _ON)
 106   2              SET_FIRST_LOADFONT();
 107   2      // Eric 0618
 108   2      #if(_HDMI_HOT_PLUG_OPTION)
                      //CScalerSetDataPortByte(_P2_HDCP_ADDR_PORT_C3, 0x40, 0x93);//Change to HDCP1.1 for HDMI
                      bHot_Plug = _HOT_PLUG_HI;
              #endif
 112   2              }
 113   1      }
 114          
 115          //--------------------------------------------------
 116          // Description  : Set panel on process
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 3   

 117          // Input Value  : None
 118          // Output Value : None
 119          //--------------------------------------------------
 120          void CPowerPanelOn(void)
 121          {
 122   1              if (GET_PANELPOWERSTATUS() == _OFF)
 123   1              {
 124   2              CPowerPanelPowerOn();
 125   2      
 126   2                      CTimerDelayXms(40);
 127   2              CPowerDisplayPortOn();
 128   2              CScalerEnableDisplayOutput();
 129   2              CTimerDelayXms(50);                             
 130   2          }
 131   1          //CPowerLightPowerOn();
 132   1          CMiscClearStatusRegister();
 133   1      
 134   1      
 135   1      }
 136          
 137          //--------------------------------------------------
 138          // Description  : Set panel off process
 139          // Input Value  : None
 140          // Output Value : None
 141          //--------------------------------------------------
 142          void CPowerPanelOff(void)
 143          {
 144   1      
 145   1          CPowerLightPowerOff();
 146   1          CTimerDelayXms(12);
 147   1          CScalerDisableDisplayOutput();
 148   1          CPowerDisplayPortOff();
 149   1          CTimerDelayXms(40);
 150   1              CPowerPanelPowerOff();
 151   1          // The delay below is to prevent from short period between panel OFF and next ON
 152   1          CTimerDelayXms(100);
 153   1      
 154   1      
 155   1      }
 156          
 157          //--------------------------------------------------
 158          // Description  : Set panel power on
 159          // Input Value  : None
 160          // Output Value : None
 161          //--------------------------------------------------
 162          void CPowerPanelPowerOn(void)
 163          {
 164   1           ALDD_UP();
 165   1           CTimerDelayXms(12);
 166   1          PANELPOWER_UP();
 167   1        
 168   1          SET_PANELPOWERSTATUS();
 169   1      }
 170          
 171          //--------------------------------------------------
 172          // Description  : Set panel power off
 173          // Input Value  : None
 174          // Output Value : None
 175          //--------------------------------------------------
 176          void CPowerPanelPowerOff(void)
 177          {
 178   1          PANELPOWER_DOWN(); //LCD的数字电源
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 4   

 179   1           CTimerDelayXms(12);//延时
 180   1          ALDD_DOWN();//LCD 模拟电源
 181   1          CLR_PANELPOWERSTATUS();//模拟电源状态位
 182   1      }
 183          
 184          //--------------------------------------------------
 185          // Description  : Set backlight power on
 186          // Input Value  : None
 187          // Output Value : None
 188          //--------------------------------------------------
 189          void CPowerLightPowerOn(void)
 190          {
 191   1              LIGHTPOWER_UP();
 192   1          SET_LIGHTPOWERSTATUS();
 193   1      }
 194          
 195          //--------------------------------------------------
 196          // Description  : Set backlight power off
 197          // Input Value  : None
 198          // Output Value : None
 199          //--------------------------------------------------
 200          void CPowerLightPowerOff(void)
 201          {
 202   1          LIGHTPOWER_DOWN();//LCD背光控制
 203   1          CLR_LIGHTPOWERSTATUS();//背光状态位
 204   1      }
 205          
 206          //--------------------------------------------------
 207          // Description  : Power on display port
 208          // Input Value  : None
 209          // Output Value : None
 210          //--------------------------------------------------
 211          void CPowerDisplayPortOn(void)
 212          {
 213   1          switch(GET_PNL_OUTPUT_BUS())
 214   1          {
 215   2              case _PANEL_TTL:
 216   2                  CPowerLVDSOn();
 217   2                  CScalerSetByte(_DISP_ACCESS_PORT_2A, 0x20);     
 218   2                      CScalerSetByte(_DISP_DATA_PORT_2B, Panel[ucPanelSelect]->TTL20);
 219   2      //            break;
 220   2      
 221   2              case _PANEL_LVDS:
 222   2                  CPowerLVDSOn();
 223   2                  break;
 224   2      
 225   2              case _PANEL_RSDS:
 226   2                  CPowerRSDSOn();
 227   2                  break;
 228   2          }
 229   1      }
 230          
 231          //--------------------------------------------------
 232          // Description  : Power off display port
 233          // Input Value  : None
 234          // Output Value : None
 235          //--------------------------------------------------
 236          void CPowerDisplayPortOff(void)
 237          {
 238   1          switch(GET_PNL_OUTPUT_BUS())
 239   1          {
 240   2              case _PANEL_TTL:
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 5   

 241   2      //            break;
 242   2      
 243   2              case _PANEL_LVDS:
 244   2                  CPowerLVDSOff();
 245   2                  break;
 246   2      
 247   2              case _PANEL_RSDS:
 248   2                  CPowerRSDSOff();
 249   2                  break;
 250   2          }
 251   1      }
 252          
 253          //--------------------------------------------------
 254          // Description  : Power on LVDS
 255          // Input Value  : None
 256          // Output Value : None
 257          //--------------------------------------------------
 258          void CPowerLVDSOn(void)
 259          {
 260   1              CScalerSetByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0);
 261   1              CScalerSetByte(_TCON_DATA_PORT_8C, 0x30);
 262   1      }
 263          //--------------------------------------------------
 264          // Description  : Power off LVDS
 265          // Input Value  : None
 266          // Output Value : None
 267          //--------------------------------------------------
 268          void CPowerLVDSOff(void)
 269          {
 270   1          CScalerSetByte(_TCON_ADDR_PORT_8B, _TCON_LVDS_CTRL0_A0);
 271   1          CScalerSetByte(_TCON_DATA_PORT_8C, 0x00);
 272   1      }
 273          
 274          //--------------------------------------------------
 275          // Description  : Power on RSDS
 276          // Input Value  : None
 277          // Output Value : None
 278          //--------------------------------------------------
 279          void CPowerRSDSOn(void)
 280          {
 281   1          CPowerLVDSOn();
 282   1          CScalerSetByte(_TCON_ADDR_PORT_8B, 0x00);
 283   1          CScalerSetByte(_TCON_DATA_PORT_8C, 0xc3);  //for 8-bit RSDS panel
 284   1          CTimerDelayXms(40);
 285   1          CScalerSetByte(_TCON_ADDR_PORT_8B, 0x00);
 286   1          CScalerSetByte(_TCON_DATA_PORT_8C, 0x83);
 287   1      }
 288          
 289          //--------------------------------------------------
 290          // Description  : Power off RSDS
 291          // Input Value  : None
 292          // Output Value : None
 293          //--------------------------------------------------
 294          void CPowerRSDSOff(void)
 295          {
 296   1              CPowerLVDSOff();
 297   1      
 298   1              CScalerSetBit(_VDISP_CTRL_28, ~_BIT1, _BIT1); // Force HS/VS/DEN/Data to 0
 299   1              CTimerDelayXms(40);
 300   1              CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_CTRL0_00, 0x48); // TTL output 0
 301   1              CTimerDelayXms(40);
 302   1              CScalerSetDataPortByte(_TCON_ADDR_PORT_8B, _TCON_CTRL0_00, 0x42); // Back to HZ
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 6   

 303   1              CScalerSetBit(_VDISP_CTRL_28, ~_BIT1, 0); // Release force
 304   1      
 305   1      }
 306          
 307          //--------------------------------------------------
 308          // Description  : Power on ADC and APLL
 309          // Input Value  : None
 310          // Output Value : None
 311          //--------------------------------------------------
 312          void CPowerADCAPLLOn(void)
 313          {
 314   1          CScalerPageSelect(_PAGE1);
 315   1          CScalerSetBit(_P1_PLL_WD_AF, ~_BIT0, 0x00);     // Power up PLL
 316   1      
 317   1          CScalerPageSelect(_PAGE0);
 318   1          CScalerSetBit(_P0_ADC_POWER_C6, ~(_BIT2 | _BIT1 | _BIT0), (_BIT2 | _BIT1 | _BIT0));    // Power up ADC
 319   1      }
 320          
 321          //--------------------------------------------------
 322          // Description  : Power off ADC and APLL
 323          // Input Value  : None
 324          // Output Value : None
 325          //--------------------------------------------------
 326          void CPowerADCAPLLOff(void)
 327          {
 328   1          CScalerPageSelect(_PAGE1);
 329   1          CScalerSetBit(_P1_PLL_WD_AF, ~_BIT0, _BIT0);     // Power down PLL
 330   1      
 331   1          CScalerPageSelect(_PAGE0);
 332   1          CScalerSetBit(_P0_ADC_POWER_C6, ~(_BIT2 | _BIT1 | _BIT0), 0x00);    // Power down ADC
 333   1      }
 334          
 335          //--------------------------------------------------
 336          // Description  : Power on TMDS
 337          // Input Value  : None
 338          // Output Value : None
 339          //--------------------------------------------------
 340          #if((_TMDS_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON))
 341          void CPowerTMDSOn(void)
 342          {
 343   1          CScalerSetBit(_SYNC_CTRL_49, ~(_BIT1 | _BIT0), 0x00);
 344   1      }
 345          #endif
 346          /*
 347          //--------------------------------------------------
 348          // Description  : Power off TMDS
 349          // Input Value  : None
 350          // Output Value : None
 351          //--------------------------------------------------
 352          void CPowerTMDSOff(void)
 353          {
 354              CScalerPageSelect(_PAGE2);
 355                  CScalerSetBit(_P2_Z0_CALIBRATION_CTRL_AC, ~_BIT6, 0x00);
 356              CScalerSetBit(_P2_TMDS_OUTPUT_CTRL_A6, ~_BIT7, 0x00);
 357          }
 358          */
 359          
 360          //--------------------------------------------------
 361          // Description  : Power off ADC and APLL
 362          // Input Value  : None
 363          // Output Value : None
 364          //--------------------------------------------------
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 7   

 365          void CPowerDPLLOff(void)
 366          {
 367   1          CScalerPageSelect(_PAGE1);
 368   1          CScalerSetBit(_P1_DPLL_N_C0, ~_BIT7, _BIT7);// Power down DPLL
 369   1      }
 370          
 371          //--------------------------------------------------
 372          // Description  : Execute power up/down process
 373          // Input Value  : None
 374          // Output Value : None
 375          //--------------------------------------------------
 376          void CPowerDownCustomerControl(void)
 377          {
 378   1              CMuteOn();
 379   1              CLR_POWERSTATUS();
 380   1              CPowerPanelOff();
 381   1              CPowerADCAPLLOff();
 382   1              CPowerLVDSOff();
 383   1              CPowerDPLLOff();
 384   1              //CPowerTMDSOff();
 385   1              CScalerSetByte(_HOST_CTRL_01, 0x02);
 386   1              
 387   1      #if(_VIDEO_TV_SUPPORT && _SLEEP_FUNC)
                      if (ucAutoPowerDownTime != 0)
              #endif
 390   1                      CEepromSaveSystemData();
 391   1      
 392   1      #if(_VIDEO_TV_SUPPORT && _SLEEP_FUNC)
                      _SET_POWER_DOWN_TIME(0);
                      ucAutoPowerDownTime = 0xff;
                      CEepromSaveTvData();
                      bOSDOnScreen = 0;
              #endif
 398   1      
 399   1              CTimerCancelTimerEvent(CModeNoSignalEvent);
 400   1              CTimerCancelTimerEvent(CModeNoCableEvent);
 401   1              CTimerCancelTimerEvent(CModeNoSupportEvent);
 402   1              CTimerCancelTimerEvent(CModePowerSavingEvent);
 403   1      
 404   1      }
 405          
 406          void CPowerUpCustomerControl(void)
 407          {
 408   1              CMuteOn();
 409   1              CPowerPanelOn();
 410   1              CPowerADCAPLLOn();
 411   1              CPowerLVDSOn();
 412   1              CPowerDPLLOff();
 413   1              
 414   1      #if((_TMDS_SUPPORT == _ON) || (_HDMI_SUPPORT == _ON))
 415   1              CPowerTMDSOn();
 416   1      #endif
 417   1      
 418   1              stSystemData.BackLight = GET_BRIGHTNESS();
 419   1              if(stSystemData.BackLight>100)
 420   1                      stSystemData.BackLight = 50;
 421   1              CAdjustBacklight();
 422   1      
 423   1      #if(_GAMMA_TYPE ==      _FULL_GAMMA_COMPRESS_TABLE2)
              //      CAdjustGamma(_FULL_GAMMA_COMPRESS_TABLE2, GAMMA_1_R, GAMMA_1_G, GAMMA_1_B);//eric 20070607
              #endif
 426   1      
C51 COMPILER V9.00   POWER                                                                 08/25/2023 16:47:33 PAGE 8   

 427   1      #if( _HDMI_SUPPORT == _ON)
 428   1              if(_GET_INPUT_SOURCE() == _SOURCE_DVI || _GET_INPUT_SOURCE() == _SOURCE_HDMI)
 429   1              {
 430   2                      CLR_HDMISHOWSEARCH();
 431   2              }
 432   1      #endif      //#if( _HDMI_SUPPORT == _ON)
 433   1      
 434   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    683    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      1    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
